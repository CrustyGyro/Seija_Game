#TouhouDanmakufu[Stage]
#Title["CSaRL_Dome"]
#Text["Cool Dome! - By Seija!"]
#ScriptVersion[3]
#Player[ "./../../Player/PL_Reimu.dnh" ]
#System["./../../System/System_Main_Hud.dnh"]


#include "./../../System/Common.dnh"

// Stage Textures

let Tex_Water_00 = GetCurrentScriptDirectory() ~ "./../../Resource/Textures/Stage/STG_00/World_C3.png";
let Tex_Water_01 = GetCurrentScriptDirectory() ~ "./../../Resource/Textures/Stage/STG_00/World_C4.png";
let Tex_Bubble_00 = GetCurrentScriptDirectory() ~ "./../../Resource/Textures/Stage/STG_00/World_C5.png";
let Tex_Glow_00 = GetCurrentScriptDirectory() ~ "./../../Resource/Textures/White_Rect.png";
let Tex_Gradient_01 = GetCurrentScriptDirectory() ~ "./../../Resource/Mesh/Gradient_00.png";


float Camera_Speed = 1; // Camera does not actually move besides the little bobbing animation, this is for scaling the texture scrolling.

//-------------------------------------------------------------------------------------------------------------------------------------------

// initialize
@Initialize {
    
	T_RenderStage;
    T_Handle_Camera;

}

@MainLoop { yield; }

@Finalize { }
 
 task T_Particles{
	
	let Particle_Obj = ObjPrim_Create( OBJ_SPRITE_3D );
	ObjPrim_SetTexture( Particle_Obj, Tex_Bubble_00 );
	ObjSprite3D_SetSourceDestRect( Particle_Obj, 0, 0, 64, 64 );
	ObjRender_SetBlendType( Particle_Obj, BLEND_ADD_ARGB );
	
	Obj_SetRenderPriorityI( Particle_Obj, 24);
	ObjRender_SetAngleZ( Particle_Obj, 180 );
	
	ObjRender_SetX( Particle_Obj, prand( -64, 64 ) );	
	ObjRender_SetY( Particle_Obj, prand( -128, 128 ) );
	ObjRender_SetZ( Particle_Obj, prand( 128, 265 ) );
	
	let Angle_X = rand( 0,360 );
	let Angle_Y = rand( 0,360 );
	let Angle_Z = rand( 0,360 );
	let Scale_RNG = rand( 0.1, 0.2 );
	
	T_ManageParticle();

	ObjRender_SetScaleXYZ( Particle_Obj, Scale_RNG, Scale_RNG, Scale_RNG );
	ObjSprite3D_SetBillboard( Particle_Obj, true );
	
	//ObjRender_SetScale( Particle_Obj, rand( 0.5, 1.5 ) );
	
	while( !Obj_IsDeleted( Particle_Obj )){
		
		ObjRender_SetY( Particle_Obj, ObjRender_GetY( Particle_Obj ) + 0.3 );
		
		Angle_X += 0.8;
		Angle_Y += 0.8;
		Angle_Z += 1;
	
		yield;
	
	}
	
	task T_ManageParticle(){
		
		T_FadeIn_A1( Particle_Obj, 160, 100 );
		
		wait( 200 );
		
		T_FadeOut_Delete( Particle_Obj, prand( 300, 1000 ), 100 );
		
	}	
	
	//Obj_Delete( Particle_Obj );
	
}
 
task T_RenderStage{

	SetFogEnable( true );
	
	let Fog_Color_Initial = [ 25, 8, 25 ];
	let Fog_Range_Inital = [ 64, 512 ];
	
	let Fog_Color_Fake_Initial = [ 25, 0, 255 ];
	let Fog_Color_Fake_Reveal = [ 255, 0, 25 ];

	SetFogParam( Fog_Range_Inital[0], Fog_Range_Inital[1], Fog_Color_Initial[0], Fog_Color_Initial[1], Fog_Color_Initial[2] );

	//--------------
		
	task T_Reveal_Stage( Obj ){
		
		let Reveal_Time = 100; //changed to sync with the music better.
		
		wait( 2000 );
		
		ascent( i in 0..Reveal_Time ){

			let Color = Interpolate_Linear( Fog_Color_Fake_Initial, Fog_Color_Fake_Reveal, i/Reveal_Time );

			ObjRender_SetColor( Obj, Color[0], Color[1], Color[2] );

			yield;
		}
		
		
	
	}		
	
	Dome_Mesh( 0, -64, 200, 255 );
		

		// IMPORTANT!!!!!
		// The order in which the sprites is created matters for proper layering!!! 
		// DO NOT CHANGE IT!!!!!!!! - Seija

		let BG_Color = Render_3D_Sprite_A1( Tex_Water_00, [ 0, 0, 1024, 1024 ], 0, 90, 128, 24, [ 1, 1, 1 ] );
		ObjSprite3D_SetBillboard( BG_Color, true );		
		ObjRender_SetFogEnable( BG_Color, false);
		T_Scroll_A1( BG_Color, [ 0, 0, 2048, 2048 ], 0.4 );
		ObjRender_SetBlendType( BG_Color, BLEND_ADD_ARGB );
		
		let BG_Color_B = Render_3D_Sprite_A1( Tex_Water_00, [ 0, 0, 1024, 1024 ], 0, 90, 128, 24, [ 1, 1, 1 ] );
		ObjSprite3D_SetBillboard( BG_Color_B, true );		
		ObjRender_SetFogEnable( BG_Color_B, false);
		T_Scroll_A2( BG_Color_B, [ 0, 0, 2048, 2048 ], -0.4 );
		ObjRender_SetBlendType( BG_Color_B, BLEND_ADD_ARGB );	
				
		
		let BG_Color_C = Render_3D_Sprite_A1( Tex_Water_01, [ 0, 0, 1024, 1024 ], 0, 90, 128, 24, [ 1, 1, 1 ] );
		ObjSprite3D_SetBillboard( BG_Color_C, true );		
		ObjRender_SetFogEnable( BG_Color_C, false);
		T_Scroll_A2( BG_Color_C, [ 0, 0, 2048, 2048 ], 0.4 );
		ObjRender_SetBlendType( BG_Color_C, BLEND_ADD_ARGB );

		let BG_Color_D = Render_3D_Sprite_A1( Tex_Gradient_01, [ 0, 0, 512, 512 ], 0, 100, 200, 24, [ 1, 1, 1 ] );	
		ObjRender_SetAngleXYZ( BG_Color_D, 90, 0, -180 );
		ObjRender_SetFogEnable( BG_Color_D, false);
		ObjRender_SetColor( BG_Color_D, 255, 0, 255 );
		ObjRender_SetBlendType( BG_Color_D, BLEND_ADD_ARGB );			


		let Water_Layer_B = Render_3D_Sprite_A1( Tex_Gradient_01, [ 0, 0, 2024, 512 ], 0, 144, 128, 24, [ 1, 1, 1 ] );
		//ObjRender_SetAngleXYZ( Water_Layer_B, 180, 0, 0 );	
		ObjRender_SetFogEnable( Water_Layer_B, false);		
		ObjRender_SetBlendType( Water_Layer_B, BLEND_ADD_ARGB );
		
		
		T_Reveal_Stage( Water_Layer_B );
		ObjRender_SetColor( Water_Layer_B, 20, 0, 255 );
		
	
	async{

		loop{
			
			ascent( i in 0..100 ){ ObjRender_SetAlpha( BG_Color_D, Interpolate_Smoother( 0, 25, i/100 ) ); yield; }
		//	
			wait(60 );
			
			ascent( i in 0..100 ){ ObjRender_SetAlpha( BG_Color_D, Interpolate_Smoother( 25, 0, i/100 ) ); yield; }
		//	
			wait(60 );			
	
		}

	}	
	

	
	async{

		loop{
			
			T_Particles;
			T_Particles;

			
			wait( 30 );
	
		}

	}		
	

	task T_Scroll_A1( Obj, Rect, Speed ){
		
		float scroll = 0;	
		
		loop{

			ObjSprite3D_SetSourceRect( Obj, Rect[0], Rect[1] + scroll, Rect[2], Rect[3] + scroll );
			
			scroll += Speed;
			yield;
		}		
		
	}
	


	task T_Scroll_A2( Obj, Rect, float Speed ){
		
		float scroll = 0;	
		
		loop{

			ObjSprite3D_SetSourceRect( Obj, Rect[0] + scroll, Rect[1], Rect[2] + scroll, Rect[3] );
			
			scroll += Speed;
			yield;
		}		
		
	}


}


task Dome_Mesh( X, Y, Z, Alpha ){
	
	let path = GetCurrentScriptDirectory() ~ "./../../Resource/Mesh/CSaRL_Dome.mqo";
	let obj = ObjMesh_Create();
	ObjMesh_Load(obj, path);
	ObjRender_SetScaleXYZ(obj, 100, 100, 100 );
	ObjRender_SetPosition(obj, X, Y, Z);
	Obj_SetRenderPriorityI(obj, 22);
	ObjRender_SetAngleY(obj, 0);
	ObjRender_SetAlpha(obj, Alpha);	
	ObjRender_SetZTest(obj, true);
	ObjRender_SetFogEnable(obj, true);
	
	async{
		
		loop{
			
			
			ObjRender_SetAngleY( obj, ObjRender_GetAngleY( obj ) + 0.1 * Camera_Speed );
			
			
			yield;
			
			
		}
		
		
	}
	
}	

function Render_3D_Sprite_A1( Path, Rect, X, Y, Z, Priority, Scale ){
		
	// Will put this in Common or make a Stage BG lib. - Seija	
		
	let obj = ObjPrim_Create(OBJ_SPRITE_3D);
	
	ObjPrim_SetTexture(obj,Path);
	
	Obj_SetRenderPriorityI(obj,Priority);
	ObjSprite3D_SetSourceDestRect(obj, Rect[0], Rect[1], Rect[2], Rect[3]);

	ObjRender_SetScaleXYZ(obj, Scale[0], Scale[1], Scale[2] );

	ObjRender_SetPosition(obj,X,Y,Z);
		
	return obj;		
}


task T_Handle_Camera{
	
    float i = 0;
	float f = 0;
	
	SetCameraPerspectiveClip( -1, 1000 );
	
	SetCameraPosEye( 0, -190, 300 ); // 0 -190, 300
	SetCameraAzimuthAngle( -90 );
	SetCameraElevationAngle( 20 );
	SetCameraRadius( 200 );
	
	SetCameraPitch( -70 );
	SetCameraYaw( 0 );
	
	
	loop{
		
		i = sin(f)*10;
		f+=0.5;
		
		SetCameraPitch( -70+ i/8 );
			
		yield;
	}	


}
