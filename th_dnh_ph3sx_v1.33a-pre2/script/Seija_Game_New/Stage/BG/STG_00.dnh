#TouhouDanmakufu[Stage]
#Title["Dark Path"]
#Text["By Seija.Real"]
#ScriptVersion[3]
#System["./../../System/System_Main_Hud.dnh"]


#include "./../../System/Common.dnh"

// Stage Textures

let Tex_Water_00 = GetCurrentScriptDirectory() ~ "./../../Resource/Textures/Stage/STG_00/Water_00.png";
let Tex_Gradient_01 = GetCurrentScriptDirectory() ~ "./../../Resource/Mesh/Gradient_00.png";
let Tex_Mist_00 = GetCurrentScriptDirectory() ~ "./../../Resource/Mesh/Cloud_00.png";
let Tex_Ground_01 = GetCurrentScriptDirectory() ~ "./../../Resource/Textures/Stage/STG_00/World_A.png";
let Tex_Tree_00 = GetCurrentScriptDirectory() ~ "./../../Resource/Textures/Stage/STG_00/World_B.png";

float Camera_Speed = 1; // Camera does not actually move besides the little bobbing animation, this is for scaling the texture scrolling.

//-------------------------------------------------------------------------------------------------------------------------------------------

// initialize
@Initialize {
    
	T_RenderStage;
    T_Handle_Camera;

}

@MainLoop { yield; }

@Finalize { }
 
 task T_Particles{
	
	let Tex_Particles = GetCurrentScriptDirectory() ~ "./../../Resource/Textures/Effect/Particle_00.png";
	
	let Particle_Obj = ObjPrim_Create( OBJ_SPRITE_3D );
	ObjPrim_SetTexture( Particle_Obj, Tex_Particles );
	ObjSprite3D_SetSourceDestRect( Particle_Obj, 0, 0, 64, 64 );
	ObjRender_SetBlendType( Particle_Obj, BLEND_ADD_ARGB );
	
	//Obj_SetRenderPriority( Particle_Obj, 0.25 );
	Obj_SetRenderPriorityI(Particle_Obj, 24);
	ObjRender_SetAngleZ( Particle_Obj, 180 );
	
	ObjRender_SetX( Particle_Obj, rand( -32, 32 ) );	
	ObjRender_SetY( Particle_Obj, 0 );
	ObjRender_SetZ( Particle_Obj, rand( -32, 16 ) );
	
	let Angle_X = rand( 0,360 );
	let Angle_Y = rand( 0,360 );
	let Angle_Z = rand( 0,360 );
	let Scale_RNG = rand( 0.1, 0.2 );
	//ObjRender_SetAlpha( Particle_Obj, 155 );
	
	//ImgFadeIn( Particle_Obj, 60, 255 );
	
	//ObjRender_SetScaleXYZ( Particle_Obj, 0.2, 0.2, 0.2 );
	ObjRender_SetScaleXYZ( Particle_Obj, Scale_RNG, Scale_RNG, Scale_RNG );
	T_FadeOut_Delete( Particle_Obj, 100, 255 );
	//ImgFadeInFadeOut_Delete( Particle_Obj, 100, 255, 1 );
	//ObjRender_SetColor( Particle_Obj, 255, 0, 0 );
	ObjRender_SetFogEnable( Particle_Obj, false );	
	//ObjRender_SetScale( Particle_Obj, rand( 0.5, 1.5 ) );
	
	descent( i in 0..200 ){
		
		ObjRender_SetX( Particle_Obj, ObjRender_GetX( Particle_Obj ) - 0.1 );
		ObjRender_SetY( Particle_Obj, ObjRender_GetY( Particle_Obj ) + 0.8 );
		//ObjRender_SetZ( Particle_Obj, ObjRender_GetZ( Particle_Obj ) - 0.2 );
		ObjRender_SetAngleXYZ( Particle_Obj, Angle_X, Angle_Y, Angle_Z );
		//ObjRender_SetAlpha( Particle_Obj,( i / 100) * 255 );
		
		Angle_X += 0.8;
		Angle_Y += 0.8;
		Angle_Z += 1;
	
		yield;
	
	}
	
	//Obj_Delete( Particle_Obj );
	
}
 
task T_RenderStage{

	SetFogEnable( true );
	
	let Fog_Color_Initial = [ 0, 8, 8 ];
	let Fog_Color_Reveal = [ 255, 255, 184 ];
	let Fog_Range_Inital = [ 512, 1000 ];
	let Fog_Range_Reveal = [ 300, 512 ];
	
	//T_Particle_Spawner;
	//T_Particle_Spawner_B;
	//T_Mist_Spawner();
	//T_Reveal_Stage;
	//SetFogParam( 300, 512, 255, 255, 184 );
	SetFogParam( Fog_Range_Inital[0], Fog_Range_Inital[1], Fog_Color_Initial[0], Fog_Color_Initial[1], Fog_Color_Initial[2] );

	//--------------
		
	task T_Reveal_Stage(){
		
		let Reveal_Time = 360; //changed to sync with the music better.
		
		//T_Reveal_Rainbow();
		
		ascent( i in 0..Reveal_Time ){

			let Color = Interpolate_Linear( Fog_Color_Initial, Fog_Color_Reveal, i/Reveal_Time );
			let Range = Interpolate_Smoother( Fog_Range_Inital, Fog_Range_Reveal, i/Reveal_Time );
			Camera_Speed = Interpolate_Smoother( Camera_Speed, 1.4, i/Reveal_Time);
		
			SetFogParam( Range[0], Range[1], Color[0], Color[1], Color[2] );

			yield;
		}
	
	}		
	
	//Wheel_Mesh( 0, -64, 200, 255 );
		

		// IMPORTANT!!!!!
		// The order in which the sprites is created matters for proper layering!!! 
		// DO NOT CHANGE IT!!!!!!!! - Seija

		let BG_Color = Render_3D_Sprite_A1( Tex_Water_00, [ 0, 0, 3072, 3072 ], 0, 0, 512, 21, [ 1, 1, 1 ] );
		ObjSprite3D_SetBillboard( BG_Color, true );		
	
		let Water_Layer_A = Render_3D_Sprite_A1( Tex_Ground_01, [ 0, 0, 1024, 1024*2 ], 0, -256, 0, 21, [ 1, 1, 1 ] );
		ObjRender_SetAngleXYZ( Water_Layer_A, 90, 0, 0 );	
		T_Scroll_A1( Water_Layer_A, [ 0, 0, 1024, 1024*2 ], 0.4 );
		
		ascent( i in 0..4 ){
			T_Repeating_Trees_A( Tex_Tree_00, -190, -256, i, 100, 0.8, 480, [ 0, 0 ,0 ] );
			//T_Repeating_Trees_A( Tex_Tree_00, -230, -256, i - 0.5, 100, 0.8, 480, [ 0, 0 ,0 ] );
			T_Repeating_Trees_A( Tex_Tree_00, -200, -200, i, 255, 0.8, 480, [ 155, 155 ,155 ] );
			T_Repeating_Trees_A( Tex_Tree_00, -200, -144, i, 255, 0.6, 480, [ 200, 200 ,200 ] );
			T_Repeating_Trees_A( Tex_Tree_00, -200, -100, i, 255, 0.4, 480, [ 255, 255 ,255 ] );
			
			T_Repeating_Trees_A( Tex_Tree_00, -250, -200, i - 0.5, 255, 0.8, 480, [ 155, 155 ,155 ] );
			T_Repeating_Trees_A( Tex_Tree_00, -250, -144, i - 0.5, 255, 0.6, 480, [ 200, 200 ,200 ] );
			T_Repeating_Trees_A( Tex_Tree_00, -250, -100, i - 0.5, 255, 0.4, 480, [ 255, 255 ,255 ] );			
			
		}
		
		ascent( i in 0..4 ){
			T_Repeating_Trees_A( Tex_Tree_00, 190, -256, i, 100, 0.8, 480, [ 0, 0 ,0 ] );
			//T_Repeating_Trees_A( Tex_Tree_00, 230, -256, i - 0.5, 100, 0.8, 480, [ 0, 0 ,0 ] );
			T_Repeating_Trees_A( Tex_Tree_00, 200, -200, i, 255, 0.8, 480, [ 155, 155 ,155 ] );
			T_Repeating_Trees_A( Tex_Tree_00, 200, -144, i, 255, 0.6, 480, [ 200, 200 ,200 ] );
			T_Repeating_Trees_A( Tex_Tree_00, 200, -100, i, 255, 0.4, 480, [ 255, 255 ,255 ] );
			
			T_Repeating_Trees_A( Tex_Tree_00, 250, -200, i - 0.5, 255, 0.8, 480, [ 155, 155 ,155 ] );
			T_Repeating_Trees_A( Tex_Tree_00, 250, -144, i - 0.5, 255, 0.6, 480, [ 200, 200 ,200 ] );
			T_Repeating_Trees_A( Tex_Tree_00, 250, -100, i - 0.5, 255, 0.4, 480, [ 255, 255 ,255 ] );			
			
		}		
		//ObjRender_SetFogEnable(Water_Layer_A, false);
		
		//ObjRender_SetTextureFilter( Water_Layer_A, FILTER_NONE, FILTER_NONE, FILTER_NONE );
		
		//let Water_Layer_B = Render_3D_Sprite_A1( Tex_Gradient_01, [ 0, 0, 2024, 512 ], 0, 128, 300, 21, [ 1, 1, 1 ] );
		//ObjRender_SetAngleXYZ( Water_Layer_B, 180, 0, 0 );	
		//ObjRender_SetFogEnable( Water_Layer_B, false);		
		
		//ObjRender_SetColor( Water_Layer_B, 0, 8, 8 );
		
		//T_Scroll_A1( Water_Layer_A, [ 0, 0, 1024, 1024 ], -0.8 );		


	task T_Scroll_A1( Obj, Rect, Speed ){
		
		float scroll = 0;	
		
		loop{

			ObjSprite3D_SetSourceRect( Obj, Rect[0], Rect[1] + scroll, Rect[2], Rect[3] + scroll );
			
			scroll += Speed * Camera_Speed;
			yield;
		}		
		
	}
	


	task T_Scroll_A2( Obj, Rect, float Speed ){
		
		float scroll = 0;	
		
		loop{

			ObjSprite3D_SetSourceRect( Obj, Rect[0] + scroll, Rect[1], Rect[2] + scroll, Rect[3] );
			
			scroll += Speed;
			yield;
		}		
		
	}


}

task T_Mist( X_Pos, Y_Pos, Z_Pos, Priority ){
	
	float Distance = 0;
	let Cloud_00 = Render_3D_Sprite_A1( Tex_Mist_00, [ 0, 0, 256, 256 ], X_Pos, Y_Pos, Z_Pos, Priority, [ 1, 1, 1 ] );
	//ObjRender_SetAngleXYZ( Cloud_00,90,0,0);
	ObjRender_SetFogEnable( Cloud_00, false );
	ObjRender_SetBlendType( Cloud_00, BLEND_ADD_ARGB );
	
	while( Distance < 1000 ) {
	
		ObjRender_SetPosition( Cloud_00, X_Pos, Y_Pos, Z_Pos );
		//ObjRender_SetPosition( Cloud_00_Shadow, X_Pos -64, 80, Z_Pos );
		ObjRender_SetAlpha( Cloud_00, 155 - Distance/4  );	
		
		X_Pos -= 1;
		Distance++;
		
		yield;
	}

	Obj_Delete( Cloud_00 );
	//Obj_Delete( Cloud_00_Shadow );
	
}

task Wheel_Mesh( X, Y, Z, Alpha ){
	
	let path = GetCurrentScriptDirectory() ~ "./../../Resource/Mesh/TH20_Pyramid_Big.mqo";
	let obj = ObjMesh_Create();
	ObjMesh_Load(obj, path);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1 );
	ObjRender_SetPosition(obj, X, Y, Z);
	Obj_SetRenderPriorityI(obj, 22);
	ObjRender_SetAngleY(obj, 0);
	ObjRender_SetAlpha(obj, Alpha);	
	ObjRender_SetZTest(obj, true);
	ObjRender_SetFogEnable(obj, true);
	
	//ObjRender_SetTextureFilter( obj, FILTER_NONE, FILTER_NONE, FILTER_NONE );
	
	//ObjRender_SetLightingEnable( obj, true, false );
	
	async{
		
		loop{
			
			
			ObjRender_SetAngleY( obj, ObjRender_GetAngleY( obj ) + 0.1 );
			
			
			yield;
			
			
		}
		
		
	}
	
}	

function Render_3D_Sprite_A1( Path, Rect, X, Y, Z, Priority, Scale ){
		
	// Will put this in Common or make a Stage BG lib. - Seija	
		
	let obj = ObjPrim_Create(OBJ_SPRITE_3D);
	
	ObjPrim_SetTexture(obj,Path);
	
	Obj_SetRenderPriorityI(obj,Priority);
	ObjSprite3D_SetSourceDestRect(obj, Rect[0], Rect[1], Rect[2], Rect[3]);

	ObjRender_SetScaleXYZ(obj, Scale[0], Scale[1], Scale[2] );

	ObjRender_SetPosition(obj,X,Y,Z);
		
	return obj;		
}

task T_Repeating_Trees_A( Texture, X, Y, Z, Alpha, Scale, Gap, Color){
	
	let Obj =  Render_3D_Sprite_A1( Tex_Tree_00, [ 0,0, 256, 256 ], X, Y, Z, 23, [ Scale, Scale, Scale ]);
	ObjRender_SetAngleXYZ( Obj, 90, 0, 0 );	
	
	ObjRender_SetColor( Obj, Color[0], Color[1], Color[2] );
	ObjRender_SetAlpha( Obj, Alpha );

	//ObjSprite3D_SetBillboard( Obj, true);
	
	float pos = 0;
	
	loop{
		if(pos >= Gap){pos = 0;}
		
		ObjRender_SetZ(Obj, Z*Gap - pos);

		pos+= 0.4 *Camera_Speed;
		
		yield;
	}	
		
	
}	

task T_Handle_Camera{
	
    float i = 0;
	float f = 0;
	
	SetCameraPerspectiveClip( -1, 1000 );
	
	SetCameraPosEye( 0, 128, 0 );
	SetCameraAzimuthAngle( -90 );
	SetCameraElevationAngle( 60 );
	SetCameraRadius( 256 );
	SetCameraFocusY( 64 );
	//SetCameraFocusZ( 0 );
	
	//SetCameraPitch( 6 );
	SetCameraYaw( 0 );
	
	
	loop{
		
		i = sin(f)*10;
		f+=0.5;
		
		//SetCameraElevationAngle( 24 -i/4 );
		SetCameraRoll( 0 +i/2 );
			
		yield;
	}	

}
