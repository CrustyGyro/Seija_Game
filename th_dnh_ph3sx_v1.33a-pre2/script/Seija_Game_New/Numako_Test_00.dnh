#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Numako_Test_00"]
#Background["./Stage/BG/STG_00.dnh"];
#Player[ "./Player/PL_Reimu.dnh", "./Player/EGoA_Reimu_A.dnh" ]
#System["./System/System_Main_Hud.dnh"]

//--------------------------------------------------Variables------------------------------------------------------

let bossObj;
let objScene = GetEnemyBossSceneObjectID();
let bossX = 0;
let bossY = 0;

//SetIntersectionVisualization( true );

let BossTex = GetCurrentScriptDirectory() ~ "./Resource/Textures/Boss/Test_Boss.png";
let Prism_Tex = GetCurrentScriptDirectory() ~ "./Resource/Textures/Boss/Prism.png";
let CutinTex = GetCurrentScriptDirectory() ~ "./Resource/Textures/Boss/Cutin/STG_01_BossSmall.png";

//---------------------------------------------------Include-------------------------------------------------------

	#include "./lib/Index_Boss.dnh"

//----------------------------------------------------Start--------------------------------------------------------

@Initialize {

	bossObj = ObjEnemy_Create(OBJ_ENEMY_BOSS);	
	
	ObjEnemy_Regist( bossObj );	

	T_Lifebar( bossObj );
	ObjEnemy_SetDamageRate( bossObj, 0, 0 );	
	ObjPrim_SetTexture( bossObj, BossTex );
	//Render_Boss_Chimi( bossObj );
	//Render_WheelGhost_A1( bossObj, ENEMY_RED );
	ObjSprite2D_SetSourceRect( bossObj, 0, 0, 128, 128 );
	ObjSprite2D_SetDestCenter( bossObj );
	//ObjRender_SetScaleX( bossObj, 0.5 * Resolution );
	//ObjRender_SetScaleY( bossObj,  0.5 * Resolution );	
	//T_Render_AtInt( bossObj, Resolution );
	
	ObjRender_SetTextureFilter( bossObj, FILTER_NONE, FILTER_NONE, FILTER_NONE );
	
	ObjMove_SetDestAtWeight( bossObj, GetStgFrameWidth/2, Get_CenterY/2 + 16, 15, 8 );
	
	
	SetPlayerLife( 8 );
	T_Main;
	T_End;
	
}

@Event { 

	alternative(GetEventType()) 
	case( EV_REQUEST_LIFE ) { 
		SetScriptResult( 3500 ); // 2500
	}
	case( EV_REQUEST_TIMER ) { 
		SetScriptResult( 45 );
	}	


} 

@MainLoop {

	bossX = ObjMove_GetX( bossObj );
	bossY = ObjMove_GetY( bossObj );

	ObjEnemy_SetIntersectionCircleToShot( bossObj, bossX, bossY, 16 );
	ObjEnemy_SetIntersectionCircleToPlayer( bossObj, bossX, bossY, 8 );
	
	yield;
}

@Finalize {
} 

//----------------------------------------------------Patterns--------------------------------------------------------

task T_Main {

	
	float ShotAngle = 0;
	float Radius = 64;
	float WaitTime = 10;
	float Dir = 3;
	float Wvel = 2;
	
	float X = 0;
	float Y = 0;
	
	NotifyEventAll( EV_BOSS_EFFECT, bossObj, CC_RED );
	
	//let Color = [ DOT_GRAY, DOT_RED, DOT_YELLOW, DOT_CYAN, DOT_PURPLE, DOT_GREEN ];

	yield;

	wait( 45 );	
	
	ObjEnemy_SetDamageRate( bossObj, 1, 1 );
	
	while(Boss_Is_Alive( bossObj )){
		
		//T_Charge_A1( bossObj, 20, CC_YELLOW );	
		
		ObjMove_SetDestAtWeight( bossObj, Get_CenterX + rand_int( -64, 64), Get_MaxY/3 + rand_int( -20, 20), 15, 1 );
		
		ascent( i in 0..4 ){ T_Boss_Shot_A( -90 + i * 180/4 ); }
		ascent( i in 0..4 ){ T_Boss_Shot_A( -90 - i * 180/4 ); }
		
		wait( 160 );
		
		T_PlaySE( SE_CHARGE_00, 30 );
		T_Charge_A1( bossObj, 20, "Petal", CC_BLUE);		
		
		wait( 30 );
		
		T_Boss_Shot_B;
		
		wait( 200 );
	}	

    ObjEnemy_SetDamageRate( bossObj, 1, 1 );

	//T_Boss_Shot_A;
	
	//T_Prism_Shots( bossObj );
	
	//int[] Color_Array_Shot = [ LIGHT_PURPLE, LIGHT_RED, LIGHT_ORANGE, LIGHT_ORANGE ];
	

}	

task T_Boss_Shot_A( Init_Angle ){
	
		//let Color_Array = [ BALL_S_RED, BALL_S_RED, BALL_S_RED, BALL_M_RED ];
	
		let way = 3;
		let stack = 8;	
		float Angle = 0;
		
		float Petal_Counter = 0;
	
		let Shot_Core =  ShotR1( bossX, bossY, 32, 1, Init_Angle, SHOT_BALL_AURA_DYELLOW, 8, SHOT_CLOUD_YELLOW );
		
		T_Petals();
		
		task T_Petals(){
			
	
			ascent( a in 0..8 ){
				
				float Detach_Timer = rand( 60, 200 );
				
				T_PlaySE( SE_CHIME_01, 35 );
				
				let Petals = ShotR1( ObjMove_GetX( Shot_Core ), ObjMove_GetY( Shot_Core ), 24, 0, 90 + a * 360/8, SHOT_SAKURA_DOLIVE, 10, SHOT_SAKURA_DOLIVE );
				let Fake_Petals = ShotR1( ObjMove_GetX( Shot_Core ), ObjMove_GetY( Shot_Core ), 24, 0, 90 + a * 360/8, SHOT_SAKURA_DORANGE, 10, SHOT_SAKURA_DORANGE );
				
				T_Manage_Petals( Shot_Core, Petals, 16, Detach_Timer );
				T_Manage_Fake_Petals( Shot_Core, Fake_Petals, 16, Detach_Timer );
			
			}
			
		}
		
		task T_Manage_Petals( Parent, Obj, Radius, RNG ){
				
			//float Detach_Timer = rand( 60, 200 );	
			float Angle = dottheta( ObjMove_GetX( Obj ), ObjMove_GetY( Obj ), ObjMove_GetX( Parent ), ObjMove_GetY( Parent ) );
			float Frame = 0;
				
			while( !Obj_IsDeleted( Parent ) ) {
		
				float X_Pos = ObjMove_GetX( Parent ) + Radius * cos( Angle );
				float Y_Pos = ObjMove_GetY( Parent ) + Radius * sin( Angle );					
						
				Angle += 1;
				Frame ++;
						
				ObjMove_SetPosition( Obj, X_Pos, Y_Pos ); 
				ObjMove_SetAngle( Obj, Angle );
				
				if( Frame >= RNG ){ Petal_Counter+= 1; break; }
						
				yield;
			}	
			
			T_PlaySE( SE_BULLET_DELETE, 28 );

			async{
						
				ObjShot_SetGraphic( Obj, SHOT_SAKURA_DORANGE );
						
				ObjMove_SetAngle( Obj, 90 + rand( -20, 20 ) );
				ObjMove_AddPatternA2( Obj, 0, NO_CHANGE, NO_CHANGE, 0.03, 2.5, 0 );
						
				while( !Obj_IsDeleted( Obj ) ){
							
					ObjRender_SetAngleZ( Obj, ObjRender_GetAngleZ( Obj ) + 2 );
							
					yield;
							
				}	
			}			

		}		
		
		task T_Manage_Fake_Petals( Parent, Obj, Radius, RNG ){
				
			//float Detach_Timer = rand( 60, 200 );	
			float Angle = dottheta( ObjMove_GetX( Obj ), ObjMove_GetY( Obj ), ObjMove_GetX( Parent ), ObjMove_GetY( Parent ) );
			float Frame = 0;
			
			T_FadeIn_A1( Obj, RNG, 255 );
				
			while( !Obj_IsDeleted( Parent ) ) {
		
				float X_Pos = ObjMove_GetX( Parent ) + Radius * cos( Angle );
				float Y_Pos = ObjMove_GetY( Parent ) + Radius * sin( Angle );					
						
				Angle += 1;
				Frame ++;
						
				ObjMove_SetPosition( Obj, X_Pos, Y_Pos ); 
				ObjMove_SetAngle( Obj, Angle );
				
				if( Frame >= RNG ){ Petal_Counter+= 1; break; }
						
				yield;
			}	
					
			Obj_Delete( Obj );		

		}				
		
}	

task T_Boss_Shot_B(){
	
	let Angle = 0;
	
	ascent( a in 0..3 ){
		
		T_PlaySE( SE_SHOT_03, 35 );
		
		ascent( i in 0..6 ){
			Pattern_Shot_A1( bossX, bossY, 1 + i/6, 24, 0 + Angle, 10 - i*2, SHOT_SCALE_AQUA, PATTERN_FAN, 3, 1, 10, SHOT_CLOUD_AQUA );
			Pattern_Shot_A1( bossX, bossY, 1 + i/6, 24, -180 + Angle, 10 - i*2, SHOT_SCALE_AQUA, PATTERN_FAN, 3, 1, 10, SHOT_CLOUD_AQUA );
			Pattern_Shot_A1( bossX, bossY, 1 + i/6, 24, 90 + Angle, 10 - i*2, SHOT_SCALE_AQUA, PATTERN_FAN, 3, 1, 10, SHOT_CLOUD_AQUA );
			Pattern_Shot_A1( bossX, bossY, 1 + i/6, 24, -90 + Angle, 10 - i*2, SHOT_SCALE_AQUA, PATTERN_FAN, 3, 1, 10, SHOT_CLOUD_AQUA );
			//Pattern_Shot_A1( bossX, bossY, 1 + i/6, 32, 180, 10 - i*2, SHOT_SCALE_AQUA, PATTERN_FAN_AIMED, 3, 1, 10, SHOT_CLOUD_AQUA );
			//yield;
		}
		
		Angle += 60;
		
		wait( 30 );
	}
}	

task T_LightShots{
	
	ascent( i in 0..16 ){
			
		ShotA1( bossX, bossY, 2, 90 + i * 360/16, SHOT_LARGE_STAR_HOLLOW_RED, 8 );
			
			
	}	
	ascent( i in 0..16 ){
			
		ShotA1( bossX, bossY, 1.5, 90 + i * 360/16 + 45, SHOT_LARGE_STAR_HOLLOW_RED, 8 );
			
			
	}			
		
	
}	

//-----------------------------------------------------Death---------------------------------------------------------

task T_End {
	
    while( ObjEnemy_GetInfo( bossObj, INFO_LIFE ) > 0 ) {
	     yield;
	}
	
	if( ObjEnemyBossScene_GetInfo( GetEnemyBossSceneObjectID, INFO_IS_LAST_STEP ) ){

		NotifyEventAll( EV_CLEAR_ENEMY_SHOTS, GetPlayerObjectID(), 60, 12 );
		//NotifyEventAll( EV_CLEAR_ENEMIES ); // WIll add proper functionality to this later - Seija
		//NotifyEventAll( EV_CLEAR_ENEMY_SHOTS, bossObj, 60, 14 );
		
		yield;
		
		SetAutoDeleteObject(true);
		
		//wait( 60 );
		
		Obj_Delete( bossObj );	
		
		ENEMY_CLEAR = true;
		
		yield;
		
		ENEMY_CLEAR = false;
		
		wait( 360 );
		
		CloseScript( GetOwnScriptID() );
		
	}	
	else{
	
		//DeleteShotAll( TYPE_ALL, TYPE_ITEM );
		
		yield;
		
		SetAutoDeleteObject(true);
		
		Obj_Delete( bossObj );	
		
		wait( 200 );
		
		CloseScript( GetOwnScriptID() );
	
	}
	
	//SetAutoDeleteObject(true);
	
	//Obj_Delete( bossObj );	
	//CloseScript( GetOwnScriptID() );
	
}

